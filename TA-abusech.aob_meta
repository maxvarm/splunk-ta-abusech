{"basic_builder": {"appname": "TA-abusech", "friendly_name": "Add-on for AbuseCH", "version": "1.1.0", "author": "", "description": "Collection of modular inputs to fetch data from AbuseCH MalwareBazaar, URLhaus, and ThreatFox.", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACZ0lEQVR4AexWXUiTURh+viOVC5HcpmQ/m6FlWVgh1MWKMlhj9CdFEbghYZFgycpuCvsRDCLSSOwig6QLCRZWF1FIV1FUEHXhRV7YRRcZhWVkkT/Tb37vu+3DKezsQsbEc+B9977Pc87Z8z47FxPhNFsCabaUINkPohxSDskckPHqDSmHZA7I+Pn9hkLj4zKDkFKHnP7ADEF/h0fisFkVNBIKxV2eqBkc+sf05/7v0HWda0ozBGkeH9586iOOI3PvMRxpaoX9cA30cBhve/twPfiUuS8/BpgjnM4db7nLPZHU77l4g/vuDz0EmdHc9QzW7Czujb9jOH8vyDWlOEH0ZbX73HCdaSSOI8uyCC01PpQ4lkNoGmPT01go8jauVR9FsKHOpC9VVvBZT1mpiVGRvdiCrz8HqYQQAlOvFYxG085zV9F2qgplq1dFkcgHOTDwZwiPXr9nYCJqMeEEZC5cgG8P2nCz6zkyvH6COGh6Cm6mpBPecqywWxnZVOgEDcKNkeIEOfJsBgQ8vhxAfXsn1xlCwJFrQ8HSXPT/+g1nnh0XOiIWN3Q8xLYNxfg/OoZ86xI0n6yErof5HKV8aw5WGmepTjZMQS97etEeqOZzfEn0Xt8uF+rvdKLRfwinD+zGMlsO3t26wphr/RrUVXhgMRyiPRQfbzfxHWcPetH6pJv33X/xCskuEdu4o3QdyjeWxFqelhqammJLcSG1HFvXFjFfu9/NvaZp3NO+zUUFjFEdiyr3dsaSSaagZDanYk9KBdHDlw2VUkEyMcQrQeRCopiTDiUaaNY55ZDMUuWQckjmgIxPuzc0CQAA//80/JdgAAAABklEQVQDAFd8OMg/czs4AAAAAElFTkSuQmCC", "visible": true, "tab_version": "4.5.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "abusech:urlhausurl", "interval": "1800", "use_external_validation": true, "streaming_mode_xml": true, "name": "abusech_urlhausurl", "title": "AbuseCH URLhaus (URL)", "description": "", "type": "customized", "parameters": [{"name": "verify_tls", "label": "Verify TLS", "help_string": "", "required": false, "format_type": "checkbox", "default_value": true, "type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "verify_tls", "title": "Verify TLS", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}], "code": "# encoding = utf-8\n\nimport json\nimport time\nfrom datetime import datetime\n\n\ndef validate_input(helper, definition):\n    interval = definition.parameters.get(\"interval\")\n    interval = int(interval)\n    if interval < 5*60 or interval > 3*24*60*60:\n        raise ValueError(\"Collect interval must be within 5 minutes and 3 days\")\n\n\ndef collect_events(helper, ew):\n    loglevel = helper.get_log_level()\n    helper.set_log_level(loglevel)\n    run_time = time.time()\n    \n    api_key = helper.get_global_setting(\"api_key\")\n    tls_verify = helper.get_arg(\"tls_verify\")\n    \n    url_base = \"https://urlhaus-api.abuse.ch\"\n    url_endpoint = \"/v1/urls/recent/\"\n    check_point_key = helper.get_input_stanza_names()\n\n    is_proxy = False\n    if helper.get_proxy():\n        is_proxy = True\n\n    start_time = None\n    last_ran = helper.get_check_point(check_point_key)\n    if not last_ran:\n        start_time = datetime.fromtimestamp(0)\n        helper.log_info(\"Fetching URLhaus URLs for the last 3 days\")\n    else:\n        start_time = datetime.fromtimestamp(last_ran)\n        helper.log_info(f\"Fetching URLhaus URLs since {start_time} UTC\")\n\n    url = url_base + url_endpoint\n    headers = {\"Auth-Key\": api_key}\n    resp = helper.send_http_request(\n        url,\n        \"GET\",\n        parameters=None,\n        payload=None,\n        headers=headers,\n        timeout=30,\n        verify=tls_verify,\n        use_proxy=is_proxy,\n    )\n    resp.raise_for_status()\n    respdata = resp.json()[\"urls\"]\n\n    helper.log_info(f\"Parsing {len(respdata)} URLhaus URLs events\")\n    for event in respdata:\n        ioc_time = datetime.strptime(event[\"date_added\"], \"%Y-%m-%d %H:%M:%S UTC\")\n        if ioc_time < start_time:\n            continue\n\n        e = helper.new_event(\n            data=json.dumps(event),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            done=True,\n        )\n        ew.write_event(e)\n\n    helper.save_check_point(check_point_key, run_time)", "customized_options": [{"name": "verify_tls", "value": true}], "uuid": "6f28845d4e3e409cace961f2f36f3530", "sample_count": "841"}, {"index": "default", "sourcetype": "abusech:urlhauspayload", "interval": "1800", "use_external_validation": true, "streaming_mode_xml": true, "name": "abusech_urlhaus_payload", "title": "AbuseCH URLhaus (Payload)", "description": "", "type": "customized", "parameters": [{"required": false, "name": "verify_tls", "label": "Verify TLS", "default_value": true, "help_string": "", "type": "checkbox", "format_type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "verify_tls", "title": "Verify TLS", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}], "code": "# encoding = utf-8\n\nimport json\nimport time\nfrom datetime import datetime\n\n\ndef validate_input(helper, definition):\n    interval = definition.parameters.get(\"interval\")\n    interval = int(interval)\n    if interval < 5*60 or interval > 3*24*60*60:\n        raise ValueError(\"Collect interval must be within 5 minutes and 3 days\")\n\ndef collect_events(helper, ew):\n    loglevel = helper.get_log_level()\n    helper.set_log_level(loglevel)\n    run_time = time.time()\n\n    url_base = \"https://urlhaus-api.abuse.ch\"\n    url_endpoint = \"/v1/payloads/recent/\"\n    check_point_key = helper.get_input_stanza_names()\n\n    api_key = helper.get_global_setting(\"api_key\")\n    tls_verify = helper.get_arg(\"tls_verify\")\n\n    is_proxy = False\n    if helper.get_proxy():\n        is_proxy = True\n\n    start_time = None\n    last_ran = helper.get_check_point(check_point_key)\n    if not last_ran:\n        start_time = datetime.fromtimestamp(0)\n        helper.log_info(\"Fetching URLhaus Payloads for the last 3 days\")\n    else:\n        start_time = datetime.fromtimestamp(last_ran)\n        helper.log_info(f\"Fetching URLhaus Payloads since {start_time} UTC\")\n\n    headers = {\"Content-Type\": \"application/json\"}\n    headers[\"Auth-Key\"] = api_key\n    url = url_base + url_endpoint\n    resp = helper.send_http_request(\n        url,\n        \"GET\",\n        parameters=None,\n        payload=None,\n        headers=headers,\n        timeout=30,\n        verify=tls_verify,\n        use_proxy=is_proxy,\n    )\n    resp.raise_for_status()\n    respdata = resp.json()[\"payloads\"]\n\n    helper.log_info(f\"Parsing {len(respdata)} URLhaus Payloads events\")\n    for event in respdata:\n        ioc_time = datetime.strptime(event[\"firstseen\"], \"%Y-%m-%d %H:%M:%S\")\n        if ioc_time < start_time:\n            continue\n\n        e = helper.new_event(\n            data=json.dumps(event),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            done=True,\n        )\n        ew.write_event(e)\n\n    helper.save_check_point(check_point_key, run_time)\n", "customized_options": [{"name": "verify_tls", "value": true}], "uuid": "d7f5914dbcf04a6699c0eaafb721a0cb"}, {"index": "default", "sourcetype": "abusech:threatfox", "interval": "1800", "use_external_validation": true, "streaming_mode_xml": true, "name": "abusech_threatfox", "title": "AbuseCH ThreatFox", "description": "", "type": "customized", "parameters": [{"required": false, "name": "tls_verify", "label": "TLS Verify", "default_value": true, "help_string": "", "type": "checkbox", "format_type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "tls_verify", "title": "TLS Verify", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}], "code": "# encoding = utf-8\n\nimport json\nimport time\nfrom datetime import datetime\n\n\ndef validate_input(helper, definition):\n    interval = definition.parameters.get(\"interval\")\n    interval = int(interval)\n    if interval < 5*60 or interval > 3*24*60*60:\n        raise ValueError(\"Collect interval must be within 5 minutes and 3 days\")\n\n\ndef collect_events(helper, ew):\n    loglevel = helper.get_log_level()\n    helper.set_log_level(loglevel)\n    run_time = time.time()\n\n    api_key = helper.get_global_setting(\"api_key\")\n    tls_verify = helper.get_arg(\"tls_verify\")\n\n    url_base = \"https://threatfox-api.abuse.ch\"\n    url_endpoint = \"/api/v1/\"\n    check_point_key = helper.get_input_stanza_names()\n    is_proxy = False\n    if helper.get_proxy():\n        is_proxy = True\n\n    fetch_days = 3\n    start_time = None\n    last_ran = helper.get_check_point(check_point_key)\n    if not last_ran:\n        start_time = datetime.fromtimestamp(0)\n        helper.log_info(f\"Fetching ThreatFox data for the last {fetch_days} days\")\n    else:\n        start_time = datetime.fromtimestamp(last_ran)\n        helper.log_info(f\"Fetching ThreatFox data since {start_time} UTC\")\n\n    body = {}\n    body[\"days\"] = fetch_days\n    body[\"query\"] = \"get_iocs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    headers[\"Auth-Key\"] = api_key\n    url = url_base + url_endpoint\n    resp = helper.send_http_request(\n        url,\n        \"POST\",\n        parameters=None,\n        payload=json.dumps(body),\n        headers=headers,\n        timeout=30,\n        verify=tls_verify,\n        use_proxy=is_proxy,\n    )\n    resp.raise_for_status()\n    respdata = resp.json()[\"data\"]\n\n    helper.log_info(f\"Parsing {len(respdata)} ThreatFox events\")\n    for event in respdata:\n        ioc_time = datetime.strptime(event[\"first_seen\"], \"%Y-%m-%d %H:%M:%S UTC\")\n        if ioc_time < start_time:\n            continue\n\n        e = helper.new_event(\n            data=json.dumps(event),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            done=True,\n        )\n        ew.write_event(e)\n    \n    helper.save_check_point(check_point_key, run_time)\n", "customized_options": [{"name": "tls_verify", "value": true}], "uuid": "126ccfabcb3c48e1b237a4e396a77b4d"}, {"index": "default", "sourcetype": "abusech:malwarebazaar", "interval": "1800", "use_external_validation": true, "streaming_mode_xml": true, "name": "abusech_malwarebazaar", "title": "AbuseCH MalwareBazaar", "description": "", "type": "customized", "parameters": [{"name": "verify_tls", "label": "Verify TLS", "help_string": "", "required": false, "format_type": "checkbox", "default_value": true, "type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "verify_tls", "title": "Verify TLS", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}], "code": "# encoding = utf-8\n\nimport json\nimport time\nfrom datetime import datetime\n\n\ndef validate_input(helper, definition):\n    interval = definition.parameters.get(\"interval\")\n    interval = int(interval)\n    if interval < 5*60 or interval > 60*60:\n        raise ValueError(\"Collect interval must be within 5 and 60 minutes\")\n\n\ndef collect_events(helper, ew):\n    loglevel = helper.get_log_level()\n    helper.set_log_level(loglevel)\n    run_time = time.time()\n\n    api_key = helper.get_global_setting(\"api_key\")\n    tls_verify = helper.get_arg(\"tls_verify\")\n\n    url_base = \"https://mb-api.abuse.ch\"\n    url_endpoint = \"/api/v1/\"\n    check_point_key = helper.get_input_stanza_names()\n\n    is_proxy = False\n    if helper.get_proxy():\n        is_proxy = True\n\n    start_time = None\n    last_ran = helper.get_check_point(check_point_key)\n    if not last_ran:\n        start_time = datetime.fromtimestamp(0)\n        helper.log_info(\"Fetching MalwareBazaar data for the last 60 minutes\")\n    else:\n        start_time = datetime.fromtimestamp(last_ran)\n        helper.log_info(f\"Fetching MalwareBazaar data since {start_time} UTC\")\n\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    headers[\"Auth-Key\"] = api_key\n    body = \"selector=time&query=get_recent\"\n    url = url_base + url_endpoint\n    resp = helper.send_http_request(\n        url,\n        \"POST\",\n        parameters=None,\n        payload=body,\n        headers=headers,\n        timeout=30,\n        verify=tls_verify,\n        use_proxy=is_proxy,\n    )\n    resp.raise_for_status()\n    respdata = resp.json()[\"data\"]\n\n    helper.log_info(f\"Parsing {len(respdata)} MalwareBazaar events\")\n    for event in respdata:\n        ioc_time = datetime.strptime(event[\"first_seen\"], \"%Y-%m-%d %H:%M:%S\")\n        if ioc_time < start_time:\n            continue\n\n        e = helper.new_event(\n            data=json.dumps(event),\n            source=helper.get_input_type(),\n            index=helper.get_output_index(),\n            sourcetype=helper.get_sourcetype(),\n            done=True,\n        )\n        ew.write_event(e)\n\n    helper.save_check_point(check_point_key, run_time)", "customized_options": [{"name": "verify_tls", "value": true}], "uuid": "291c3bf7e5aa4d358514961fcc59dcc3", "sample_count": 0}]}, "field_extraction_builder": {"abusech:urlhausurl": {"data_format": "json"}, "abusech:malwarebazaar": {"data_format": "json"}, "abusech:threatfox": {"data_format": "json"}, "abusech:urlhauspayload": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "customized_settings": [{"required": true, "name": "api_key", "label": "API Key", "placeholder": "", "default_value": "", "help_string": "Your AbuseCH API Key (also called Auth Key)", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"abusech:urlhausurl": {"metadata": {"event_count": 0, "data_input_name": "abusech_urlhausurl", "extractions_count": 0, "cims_count": 0}}, "abusech:urlhauspayload": {"metadata": {"event_count": 0, "data_input_name": "abusech_urlhaus_payload", "extractions_count": 0, "cims_count": 0}}, "abusech:malwarebazaar": {"metadata": {"event_count": 0, "data_input_name": "abusech_malwarebazaar", "extractions_count": 0, "cims_count": 0}}, "abusech:threatfox": {"metadata": {"event_count": 0, "data_input_name": "abusech_threatfox", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1754923190_99", "progress": 1.0}}